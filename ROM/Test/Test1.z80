PAGEL           .equ 0x00
PAGEH           .equ 0x01
PID             .equ 0x02
CLRINT          .equ 0x03
INT_SOURCE_1    .equ 0x04
INT_SOURCE_2    .equ 0x05
RAMEN           .equ 0x06
GOUSR           .equ 0x07

VERA_ADDR_L     .equ 0x20
VERA_ADDR_M     .equ 0x21
VERA_ADDR_H     .equ 0x22
VERA_DATA0      .equ 0x23
VERA_DATA1      .equ 0x24

VERA_CTRL       .equ 0x25
VERA_IEN        .equ 0x26
VERA_ISR        .equ 0x27
VERA_IDQLINE_L  .equ 0x28
VERA_SCANLINE_L .equ 0x28

VERA_DC_VIDEO   .equ 0x29
VERA_DC_HSCALE  .equ 0x2a
VERA_DC_VSCALE  .equ 0x2b
VERA_DC_BORDER  .equ 0x2c

VERA_DC_HSTART  .equ 0x29
VERA_DC_HSTOP   .equ 0x2a
VERA_DC_VSTART  .equ 0x2b
VERA_DC_VSTOP   .equ 0x2c

VERA_L0_CONFIG   .equ 0x2d
VERA_L0_MAPBASE  .equ 0x2e
VERA_L0_TILEBASE .equ 0x2f

VERA_L1_CONFIG   .equ 0x34
VERA_L1_MAPBASE  .equ 0x35
VERA_L1_TILEBASE .equ 0x36

KMI_DATA        .equ 0x40
KMI_COMMAND     .equ 0x41
KMI_STATUS      .equ 0x41

ATARI           .equ 0x60

VRAM_FONT_ADDR  .equ 0x7000
VRAM_TEXT_ADDR  .equ 0x8000
VRAM_TEXT_SIZE  .equ 128*64
VRAM_L1_ADDR    .equ VRAM_TEXT_ADDR+VRAM_TEXT_SIZE*2

VRAM_TILE_ADDR  .equ 0x0000

NMICounter      .equ 0x8000

;Top 4 bits of page table:
; bit 15: WP, 1=disable writing
; bit 14: WI, 0=generate interrupt on write
; bit 13: NX/XE 1/0=generate interrupt on M1 cycle
; bit 12: RI 0=generate interrupt on read.

    .org 0x0000     ;ROM reset vector, console I/O
    jp ROMreset
    .org 0x0008     ;RST 0X08, keyboard/controller input
    jp consoleHandler
    .org 0x0010     ;RST 0X10, graphics routines
    jp graphicsHandler
    .org 0x0018     ;RST 0X18, audio routines
    .org 0x0020     ;RST 0x20, file access
    .org 0x0028     ;RST 0x28, system routines
    .org 0x0030     ;RST 0X30, direct I/O
    .org 0x0038     ;RST 0X38, debug
    ret
    .org 0x0066
nmiHandler
    push af
    push bc
    push de
    push hl
    ; in a,(INT_SOURCE_1)
    ; call printBin
    ld a,(NMICounter)
    inc a
    ld (NMICounter),a
    ld de,0x0524
    call printBin
    out (CLRINT),a
    ld a,0x07
    out (VERA_ISR),a
    ld hl,MESSAGE2
    ld b,10
    ld de,0x0100
    call printString
    out (GOUSR),a
    pop hl
    pop de
    pop bc
    pop af
    ret

    .org 0x100
ROMreset:
VERAinit:
    .waitvera:
    ld a,0x24
    out (VERA_ADDR_L),a
    in a,(VERA_ADDR_L)
    cp a,0x24
    jp nz,.waitvera

    ld a,0b00110001
    out (VERA_DC_VIDEO),a

    ld a,0b01100000
    out (VERA_L0_CONFIG),a
    ld a,(VRAM_FONT_ADDR>>9)|0b10
    out (VERA_L0_TILEBASE),a
    ld a,VRAM_TEXT_ADDR>>9
    out (VERA_L0_MAPBASE),a

    ld a,0b01100010
    out (VERA_L1_CONFIG),a
    ld a,0
    out (VERA_L1_TILEBASE),a
    ld a,VRAM_L1_ADDR>>9
    out (VERA_L1_MAPBASE),a

    ld a,0b00000000
    out (VERA_CTRL),a

    ld a,<VRAM_FONT_ADDR
    out (VERA_ADDR_L),a
    ld a,>VRAM_FONT_ADDR
    out (VERA_ADDR_M),a
    ld a,0b00010000
    out (VERA_ADDR_H),a

    ld bc,0x1000
    ld hl,font
    .loadfont:
    ld a,(hl)
    out (VERA_DATA0),a
    inc hl
    dec c
    jp nz,.loadfont
    dec b
    jp nz,.loadfont

    ld a,<VRAM_TEXT_ADDR
    out (VERA_ADDR_L),a
    ld a,>VRAM_TEXT_ADDR
    out (VERA_ADDR_M),a
    ld a,0b00010000
    out (VERA_ADDR_H),a
    ld bc,VRAM_TEXT_SIZE
    .fillVRAMl0:
    ld a,0x20
    out (VERA_DATA0),a
    ld a,0x01
    out (VERA_DATA0),a
    dec c
    jp nz,.fillVRAMl0
    dec b
    jp nz,.fillVRAMl0

    ld a,<VRAM_L1_ADDR
    out (VERA_ADDR_L),a
    ld a,>VRAM_L1_ADDR
    out (VERA_ADDR_M),a
    ld a,0b00010000
    out (VERA_ADDR_H),a
    ld bc,VRAM_TEXT_SIZE
    .fillVRAMl1:
    ld a,0x00
    out (VERA_DATA0),a
    ld a,0x00
    out (VERA_DATA0),a
    dec c
    jp nz,.fillVRAMl1
    dec b
    jp nz,.fillVRAMl1

RAMinit:
    ld a,0b10000000         ;process number=0, SYSGATE=1
    out (PID),a             ;set process ID
    ld c,PAGEL
    ld b,0
    .loadPageL:
    ld a,b
    out (c),a
    inc b
    jp nz,.loadPageL

    ld c,PAGEH
    ld b,0
    ld d,0x70       ;enable everything
    .loadPageH:
    out (c),d
    inc b
    jp nz,.loadPageH

    ld bc,0x8000    ;32KiB to copy
    ld de,0         ;source start address
    ld hl,0         ;destination start address
    ldir            ;copy data
    ld a,<consoleHandler
    ld (1),a
    ld a,>consoleHandler
    ld (2),a
    ld sp,0xffff    ;initialize stack
    in a,(RAMEN)    ;start running in RAM

initComplete:
    out (GOUSR),a
    LD HL,MESSAGE
    LD B,10
    ld c,1
    LD DE,0
    rst 0x00


    out (CLRINT),a
    ld a,0b00000000
    out (VERA_IEN),a
    ; out (GOUSR),a

    ld hl,tile
    ld c,1
    ld e,0
    rst 0x10
;     ld b,32
;     ld a,0
;     out (VERA_ADDR_L),a
;     out (VERA_ADDR_M),a
;     ld a,0x10
;     out (VERA_ADDR_H),a
; manualload:
;     ld a,(hl)
;     rlca
;     rlca
;     rlca
;     rlca
;     out (VERA_DATA0),a
;     inc hl
;     dec b
;     jp nz,manualload
    ld a,16
    out (VERA_DC_HSCALE),a
    out (VERA_DC_VSCALE),a


infwait:
    jp infwait

KMITest:
    LD A,0Xaa
    OUT (KMI_COMMAND),A

    LD A,0X88
    LD I,A
    call waitamoment
    ld a,0xff
    ld i,a
    in a,(KMI_DATA)
    cp 0x55
    jp nz,nmiHandler
    ld a,0x60
    out (KMI_COMMAND),a
    call waitamoment
    ld a,0b01100100
    out (KMI_DATA),a
    .shiftByte:
    call waitamoment
    ld a,0xd1
    out (KMI_COMMAND),a
    call waitamoment
    ld a,0b00000011
    out (KMI_DATA),a
    call waitamoment
    ld a,0xd1
    out (KMI_COMMAND),a
    call waitamoment
    ld a,0b00000001
    out (KMI_DATA),a
    call waitamoment
    ld b,8
    .shiftbit:
    ld a,0xc0
    out (KMI_COMMAND),a
    call waitread
    in a,(KMI_DATA)
    and 0b00000100
    scf
    jr z,.bitis1
    ccf
    .bitis1:
    rl d
    ld a,0xfe
    out (KMI_COMMAND),a
    call waitamoment
    dec b
    jr nz,.shiftbit
    ld a,d
    call printBin
    JP .shiftByte

waitread:
    push af
waitreadloop:
    in a,(KMI_STATUS)
    and 0b00000001
    jr nz,waitreadloop
    pop af
    push bc
    ld b,50
waittestkmi2:
    dec b
    jr nz,waittestkmi2
    pop bc
    ret

waitamoment:
    push bc
    ld b,0
waittestkmi:
    dec b
    jr nz,waittestkmi
    pop bc
    ret

printString:            ;B=length, HL=pointer, DE=location
    ld a,e
    sla a
    out (VERA_ADDR_L),a
    ld a,d
    add >VRAM_TEXT_ADDR
    OUT (VERA_ADDR_M),A
    LD A,0B00100000
    OUT (VERA_ADDR_H),A
    .OUTCHAR:
    ld a,(hl)
    out (VERA_DATA0),A
    INC HL
    DJNZ .OUTCHAR
    RET

printBin:               ;A=number, DE=location
    PUSH AF
    LD A,e
    sla a
    out (VERA_ADDR_L),a
    ld a,d
    add >VRAM_TEXT_ADDR
    out (VERA_ADDR_M),A
    LD A,0B00100000
    OUT (VERA_ADDR_H),A
    POP AF
    LD C,VERA_DATA0
    LD D,8
    .PRINTBIT:
    LD B,'1'
    RLC A
    JR C,.BIT1
    LD B,'0'
    .BIT1:
    OUT (C),B
    DEC D
    JR NZ,.PRINTBIT
    RET

consoleHandler:
    dec c
    jp z,printString
    dec c
    jp z,printBin
    ld c,0xff
    out (GOUSR),a
    ret

loadTile:               ;E=tile Number, HL=tile information
    push bc
    push de
    push hl
    sla e
    rl d
    sla e
    rl d
    sla e
    rl d
    sla e
    rl d
    sla e
    rl d
    ld a,e
    out (VERA_ADDR_L),a
    ld a,d
    out (VERA_ADDR_M),a
    ld a,0x10
    out (VERA_ADDR_H),a
    ld b,32
    .loop:
    ld a,(hl)
    rlca
    rlca
    rlca
    rlca
    out (VERA_DATA0),a
    inc hl
    djnz .loop
    pop hl
    pop de
    pop bc
    ld c,00
    and c
    ret
setTile:
graphicsHandler:
    dec c
    jp z,loadTile
    dec c
    jp z,setTile
    ld c,0xff
    out (GOUSR),a
    ret

MESSAGE:
    .DB 'HELLO!!!!!'
MESSAGE2:
    .DB 'MESSAGE2  '
tile:
    .incbin "tree.bin"
    .org 0x7000
font:
    .incbin "HEC1FNT.bin"