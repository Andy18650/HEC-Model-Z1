    .include "ports.z80"

NMICounter      .equ 0x8000
NMICounter2     .equ 0x8001
NMISubCounter   .equ 0x8002

thisPID         .equ 0xff1d
nextPID         .equ 0xff1e
backsp          .equ 0xff1c

VRAM_TEXT_ADDR  .equ 0x8000


    .org 0x0000     ;ROM reset vector, console I/O
    rla
    ld (console.Caller+2),a
    jp console.Caller

    .org 0x0008     ;RST 0X08, keyboard/controller input
    .org 0x0010     ;RST 0X10, graphics routines
    jp graphics.Caller
    .org 0x0018     ;RST 0X18, audio routines

    .org 0x0020     ;RST 0x20, file access
    .org 0x0028     ;RST 0x28, system routines
    .org 0x0030     ;RST 0X30, direct I/O
    .org 0x0038     ;RST 0X38, debug
    ret
    .org 0x0066
nmiHandller:
    push af
    push bc
    push de
    push hl
    ; in a,(INT_SOURCE_1)
    ; call printBin
    ; ld a,(NMISubCounter)
    ; inc a
    ; ld (NMISubCounter),a
    ; cp 60
    ; jr nz,.nmiexit
    ; ld a,0
    ; ld (NMISubCounter),a
    ; ld hl,(NMICounter)
    ; inc hl
    ; ld (NMICounter),hl
    ; ld c,h
    ; ld de,0x0100
    ; call printBin
    ; ld c,l
    ; ld de,0x0108
    ; call printBin
    ; .nmiexit:
    ; ld a,0x07
    ; out (VERA_ISR),a
    pop hl
    pop de
    pop bc
    pop af
    out (CLRINT),a
    out (GOUSR),a
    ret

pageWriteGadget:     ;B=page number,HL=physical page and attributes,A=target process ID,E=return process ID,destory:C,A
    out (PID),a
    ld c,PAGEL
    out (c),l
    ld c,PAGEH
    out (c),h
    ld a,e
    out (PID),a
    ret

pageReadGadget:      ;B=page number,A=target process ID,E=return process ID,destory:C,A,return: HL=physical page and attributes
    out (PID),a
    ld c,PAGEL
    in l,(c)
    ld c,PAGEH
    in h,(c)
    ld a,e
    out (PID),a
    ret

memWriteGadget:     ;HL=target address,C=value to be written to (HL) at target process,A=target process ID,E=return process ID
    out (PID),a
    ld (hl),c
    ld a,e
    out (PID),a
    ret

memReadGadget:     ;HL=target address,A=target process ID,E=return process ID,return: C=value at (HL) in target process
    out (PID),a
    ld c,(hl)
    ld a,e
    out (PID),a
    ret

farCallGadget:      ;A'=return PID,A=target PIDï¼ŒHL=target address, parameters passed in BC',DE',HL'
    ld (backsp),sp
    out (PID),a
    ld sp,(backsp)
    push hl
    ld hl,.returnAddr
    ex (sp),hl
    push hl
    exx
    ret
    .returnAddr:
    ex af,af'
    ld (backsp),sp
    out (PID),a
    ld sp,(backsp)
    exx
    ret

taskSwitchGadget:
    push bc
    push de
    push hl
    ex af,af'
    exx
    push af
    push bc
    push de
    push hl
    push ix
    push iy
    ld (backsp),sp
    ex af,af'
    out (PID),a
    ld sp,(backsp),sp
    pop iy
    pop ix
    pop hl
    pop de
    pop bc
    pop af
    exx
    ex af,af'
    pop hl
    pop de
    pop bc
    ret

    .org 0x100
kernelStart:
    LD HL,MESSAGE
    LD B,10
    ld a,1
    LD DE,0x0000
    rst 0x00

    rst 0x38
    ld b,0x42
    ld a,0x82
    ld e,0x80
    ld hl,0x70c5
    call pageWriteGadget
    ld b,0x42
    ld a,0x82
    ld e,0x80
    call pageReadGadget
    ld c,l
    ld de,0x0612
    call printBin
    ld a,0xf0
    ld (NMICounter),a

    ld hl,0x8086
    ld de,testPayload
    ld b,10
injectCode:
    ld a,(de)
    ld c,a
    push de
    ld a,0x81
    ld e,0x80
    call memWriteGadget
    pop de
    inc de
    inc hl
    djnz injectCode
    ld a,0x81
    ld e,0x80
    ld hl,0x808d
    call memReadGadget
    ld de,0x0712
    call printBin

farcalltest:
    ld a,0x80
    ex af,af'
    push af
    ld a,0x81
    exx
    push hl
    ld hl,0x8086
    call farCallGadget
    pop hl
    exx
    pop af
    ex af,af'
    ld de,0x0813
    call printBin

testend:
    out (GOUSR),a
infwait:
    jp infwait


printString:            ;B=length, HL=pointer, DE=location
    ld a,e
    sla a
    out (VERA_ADDR_L),a
    ld a,d
    add >VRAM_TEXT_ADDR
    OUT (VERA_ADDR_M),A
    LD A,0B00100000
    OUT (VERA_ADDR_H),A
    .OUTCHAR:
    ld a,(hl)
    out (VERA_DATA0),A
    INC HL
    DJNZ .OUTCHAR
    RET

printBin:               ;C=number, DE=location
    PUSH AF
    LD A,e
    sla a
    out (VERA_ADDR_L),a
    ld a,d
    add >VRAM_TEXT_ADDR
    out (VERA_ADDR_M),A
    LD A,0B00100000
    OUT (VERA_ADDR_H),A
    POP AF
    ld a,c
    LD C,VERA_DATA0
    LD D,8
    .PRINTBIT:
    LD B,'1'
    RLC A
    JR C,.BIT1
    LD B,'0'
    .BIT1:
    OUT (C),B
    DEC D
    JR NZ,.PRINTBIT
    RET



console.Caller:
    push hl
console1:
    ld hl,(consoleRoutines)
    ld (console2+1),hl
    pop hl
console2:
    call 0
    out (GOUSR),a
    ret
unknownCall:
    ld a,0
    dec a
    ret

testPayload:
    ld a,0x55
    ld b,0xaa
    ld c,0x42
    ld d,0x69
    ret

MESSAGE:
    .DB 'HELLORLD! '

graphics.Caller:
    .org 0x200
consoleRoutines:
    .addr 0
    .addr printString
    .addr printBin
    .blkw (consoleRoutines+512-$)/2,unknownCall
    .db testend-farcalltest